import Notification from "../models/Notification.js";
import logger from "../utils/logger.js";

// ‚úÖ Yeni Bildirim Olu≈üturma
export const createNotification = async (req, res, next) => {
  try {
    const { recipient, message } = req.body;

    const notification = await Notification.create({
      recipient,
      message,
    });

    logger.info(`üîî Yeni bildirim olu≈üturuldu: ${message} - Alƒ±cƒ±: ${recipient}`);
    res.status(201).json(notification);
  } catch (error) {
    logger.error(`‚ùå Bildirim olu≈üturulurken hata olu≈ütu: ${error.message}`);
    next(error);
  }
};

// ‚úÖ Kullanƒ±cƒ±nƒ±n Bildirimlerini Getirme
export const getUserNotifications = async (req, res, next) => {
  try {
    const notifications = await Notification.find({ recipient: req.user._id });

    if (!notifications.length) {
      logger.warn(`‚ö†Ô∏è Kullanƒ±cƒ±nƒ±n bildirimi bulunmamaktadƒ±r: ${req.user._id}`);
      return res.status(404).json({ message: "Hen√ºz bildiriminiz bulunmamaktadƒ±r." });
    }

    logger.info(`üì© ${notifications.length} bildirim getirildi - Kullanƒ±cƒ±: ${req.user._id}`);
    res.json(notifications);
  } catch (error) {
    logger.error(`‚ùå Bildirimler getirilirken hata olu≈ütu: ${error.message}`);
    next(error);
  }
};

// ‚úÖ Bildirimi Okundu Olarak ƒ∞≈üaretleme
export const markNotificationAsRead = async (req, res, next) => {
  try {
    const notification = await Notification.findById(req.params.id);

    if (!notification) {
      logger.warn(`‚ö†Ô∏è Okundu olarak i≈üaretlenmek istenen bildirim bulunamadƒ±: ${req.params.id}`);
      return res.status(404).json({ message: "Bildirim bulunamadƒ±." });
    }

    notification.isRead = true;
    await notification.save();
    logger.info(`‚úÖ Bildirim okundu olarak i≈üaretlendi: ${notification.message} (${notification._id})`);
    res.json(notification);
  } catch (error) {
    logger.error(`‚ùå Bildirim okundu olarak i≈üaretlenirken hata olu≈ütu: ${error.message}`);
    next(error);
  }
};
